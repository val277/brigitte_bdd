CREATE DATABASE IF NOT EXISTS brigitte_bdd;

USE brigitte_bdd;

---- TABLES SANS CLEF ETRANGERE ----
-- TOP SECTION : ESPECE, FAMILLE, ORDRE, CLASSE, ORIGINE
CREATE TABLE IF NOT EXISTS espece (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS famille (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ordre (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS classe ( 
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL,
  adoptable BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS origine (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL
);

-- LEFT SECTION : CARNET, VACCIN, MALADIE
CREATE TABLE IF NOT EXISTS carnet (
  id INT AUTO_INCREMENT PRIMARY KEY,
  prochaineVaccination DATE,
  id_animal INT UNIQUE NOT NULL,
  FOREIGN KEY (id_animal) REFERENCES animal(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS maladie (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL
);

-- BOTTOM SECTION : FONCTIONNALITE, POSTE, ADRESSE
CREATE TABLE IF NOT EXISTS fonctionnalite (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(254) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS poste (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS adresse (
  id INT AUTO_INCREMENT PRIMARY KEY,
  rueEtNumero VARCHAR(254),
  ville VARCHAR(50) NOT NULL,
  codePostal VARCHAR(25)
);

-- RIGH SECTION : PARENT, ENFANT
CREATE TABLE IF NOT EXISTS parent (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS enfant (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL
);

---- TABLES AVEC CLEF ETRANGERE ----
CREATE TABLE IF NOT EXISTS vaccin (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL,
  id_classe INT NOT NULL,
  FOREIGN KEY (id_classe) REFERENCES classe(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS employe (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) NOT NULL,
  prenom VARCHAR(50) NOT NULL,
  id_adresse INT NOT NULL,
  id_poste INT NOT NULL,
  FOREIGN KEY (id_adresse) REFERENCES adresse(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_poste) REFERENCES poste(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS adoptant (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(50) NOT NULL,
  prenom VARCHAR(50) NOT NULL,
  id_adresse INT NOT NULL,
  FOREIGN KEY (id_adresse) REFERENCES adresse(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS menu (
  id INT AUTO_INCREMENT PRIMARY KEY,
  viande INT NOT NULL DEFAULT 0,
  legume INT NOT NULL DEFAULT 0,
  id_employe INT NOT NULL,
  FOREIGN KEY (id_employe) REFERENCES employe(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS allee (
  id INT AUTO_INCREMENT PRIMARY KEY,
  id_employe INT NOT NULL,
  FOREIGN KEY (id_employe) REFERENCES employe(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS cage (
  id INT AUTO_INCREMENT PRIMARY KEY,
  id_fonctionnalite INT NOT NULL,
  id_allee INT NOT NULL,
  FOREIGN KEY (id_fonctionnalite) REFERENCES fonctionnalite(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_allee) REFERENCES allee(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS animal (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(100) NOT NULL,
  race VARCHAR(50) NOT NULL,
  sexe CHAR(1) NOT NULL CHECK (sexe IN ('M', 'F')),
  dateNaissance DATE NOT NULL,
  dateArrivee DATE NOT NULL,
  domestique BOOLEAN DEFAULT FALSE,
  id_classe INT NOT NULL,
  id_ordre INT NOT NULL,
  id_famille INT NOT NULL,
  id_espece INT NOT NULL,
  id_origine INT,
  id_menu INT NOT NULL,
  id_cage INT NOT NULL,
  FOREIGN KEY (id_classe) REFERENCES classe(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_ordre) REFERENCES ordre(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_famille) REFERENCES famille(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_espece) REFERENCES espece(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_origine) REFERENCES origine(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_menu) REFERENCES menu(id) ON DELETE RESTRICT,
  FOREIGN KEY (id_cage) REFERENCES cage(id) ON DELETE RESTRICT
);

---- TABLES ASSOCIATIVES ----
CREATE TABLE IF NOT EXISTS carnet_vaccin (
  id_carnet INT NOT NULL,
  id_vaccin INT NOT NULL,
  dateVaccination DATE NOT NULL,
  FOREIGN KEY (id_carnet) REFERENCES carnet(id) ON DELETE CASCADE,
  FOREIGN KEY (id_vaccin) REFERENCES vaccin(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_carnet, id_vaccin)
);

CREATE TABLE IF NOT EXISTS carnet_maladie (
  id_carnet INT NOT NULL,
  id_maladie INT NOT NULL,
  dateContraction DATE NOT NULL,
  FOREIGN KEY (id_carnet) REFERENCES carnet(id) ON DELETE CASCADE,
  FOREIGN KEY (id_maladie) REFERENCES maladie(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_carnet, id_maladie)
);

CREATE TABLE IF NOT EXISTS animal_parent (
  id_animal INT NOT NULL,
  id_parent INT NOT NULL,
  FOREIGN KEY (id_animal) REFERENCES animal(id) ON DELETE CASCADE,
  FOREIGN KEY (id_parent) REFERENCES parent(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_animal, id_parent)
);

CREATE TABLE IF NOT EXISTS animal_enfant (
  id_animal INT NOT NULL,
  id_enfant INT NOT NULL,
  FOREIGN KEY (id_animal) REFERENCES animal(id) ON DELETE CASCADE,
  FOREIGN KEY (id_enfant) REFERENCES enfant(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_animal, id_enfant)
);

CREATE TABLE IF NOT EXISTS animal_employe (
  id_animal INT NOT NULL,
  id_employe INT NOT NULL,
  FOREIGN KEY (id_animal) REFERENCES animal(id) ON DELETE CASCADE,
  FOREIGN KEY (id_employe) REFERENCES employe(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_animal, id_employe)
);

CREATE TABLE IF NOT EXISTS cage_employe (
  id_cage INT NOT NULL,
  id_employe INT NOT NULL,
  FOREIGN KEY (id_cage) REFERENCES cage(id) ON DELETE CASCADE,
  FOREIGN KEY (id_employe) REFERENCES employe(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_cage, id_employe)
);

CREATE TABLE IF NOT EXISTS adoptant_animal (
  id_adoptant INT NOT NULL,
  id_animal INT NOT NULL,
  FOREIGN KEY (id_adoptant) REFERENCES adoptant(id) ON DELETE CASCADE,
  FOREIGN KEY (id_animal) REFERENCES animal(id) ON DELETE RESTRICT,
  PRIMARY KEY (id_adoptant, id_animal)
);
